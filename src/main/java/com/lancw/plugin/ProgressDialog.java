package main.java.com.lancw.plugin;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.MouseInfo;
import java.awt.Point;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;

/**
 *
 * @author xuhuan
 */
public class ProgressDialog extends javax.swing.JDialog {

    private final Color[] colors = new Color[]{Color.BLACK, Color.BLUE, Color.RED, Color.WHITE, Color.PINK};
    private final int[] font_styles = new int[]{Font.BOLD, Font.ITALIC, Font.PLAIN};
    private final int[] font_sizes = new int[]{60, 70, 65, 55};
    private final String[] font_names = new String[]{"华文楷体", "华文隶书", "华文行楷", "黑体", "仿宋"};
    private final String[] tips = new String[]{"玩命加载中...", "程序小哥正在处理，请耐心等待...", "客官请稍等...", "CPU正在狂奔...", "虚位以待...", "广告之后马上回来..."};
    private final Random random = new Random();
    private Timer timer;
    private int count = 0;

    /**
     * Creates new form ProgressDialog
     * <p>
     * @param parent
     * @param modal
     */
    public ProgressDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setSize(parent.getSize());
        setLocation(parent.getLocation());
        setBackground(Color.lightGray);
        count = 0;
    }

    /**
     * 启动定时任务，绘制鼠标路径
     */
    public void initTimer() {
        timer = new Timer();
        timer.schedule(new TimerTask() {
            int x, y;
            int flag = random.nextInt(5);

            @Override
            public void run() {
                Graphics g = getGraphics();
                if (g != null) {
                    if (count == 0) {//遮罩背景只绘制一次
                        paintMask(g);
                        count++;
                    }
                    Point p = MouseInfo.getPointerInfo().getLocation();
                    g.setColor(Color.red);
                    if (x != 0 && y != 0) {
                        switch (flag) {
                            case 0:
                                g.drawLine(x - 123, y - 10, p.x - 123, p.y - 10);
                            case 1:
                                g.drawLine(x - 123, y - 5, p.x - 123, p.y - 5);
                            case 2:
                                g.drawLine(x - 123, y, p.x - 123, p.y);
                            case 3:
                                g.drawLine(x - 123, y + 5, p.x - 123, p.y + 5);
                            case 4:
                                g.drawLine(x - 123, y + 10, p.x - 123, p.y + 10);
                        }
                    }
                    x = p.x;
                    y = p.y;
                }
            }
        }, 0, 50);
    }

    /**
     * 绘制遮罩层
     * <p>
     * @param g
     */
    public void paintMask(Graphics g) {
        Dimension size = getSize();
        g.setColor(new Color(Color.lightGray.getRed(), Color.lightGray.getGreen(), Color.lightGray.getBlue(), 100));
        g.fillRect(0, 0, size.width, size.height);
        g.setColor(colors[random.nextInt(colors.length)]);
        Font font = new Font(font_names[random.nextInt(font_names.length)], font_styles[random.nextInt(font_styles.length)], font_sizes[random.nextInt(font_sizes.length)]);
        g.setFont(font);
        String str = tips[random.nextInt(tips.length)];
        g.drawString(str, size.width / 2 - g.getFontMetrics().stringWidth(str) / 2, size.height / 2);
    }

    @Override
    public void paint(Graphics g) {
        //覆盖paint方法。使所有组件不绘制
    }

    @Override
    public void dispose() {
        super.dispose();
        if (timer != null) {
            timer.cancel();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form
     * Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setForeground(new java.awt.Color(255, 255, 255));
        setUndecorated(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
